"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_src_lib_testStore_ts"],{

/***/ "(app-pages-browser)/./src/lib/testStore.ts":
/*!******************************!*\
  !*** ./src/lib/testStore.ts ***!
  \******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addChoice: function() { return /* binding */ addChoice; },\n/* harmony export */   addQuestion: function() { return /* binding */ addQuestion; },\n/* harmony export */   addQuiz: function() { return /* binding */ addQuiz; },\n/* harmony export */   addTestAnnouncement: function() { return /* binding */ addTestAnnouncement; },\n/* harmony export */   addTestAssignment: function() { return /* binding */ addTestAssignment; },\n/* harmony export */   addTestCourse: function() { return /* binding */ addTestCourse; },\n/* harmony export */   addTestEnrollment: function() { return /* binding */ addTestEnrollment; },\n/* harmony export */   addTestFile: function() { return /* binding */ addTestFile; },\n/* harmony export */   addTestLesson: function() { return /* binding */ addTestLesson; },\n/* harmony export */   addTestMessage: function() { return /* binding */ addTestMessage; },\n/* harmony export */   addTestModule: function() { return /* binding */ addTestModule; },\n/* harmony export */   addTestNotification: function() { return /* binding */ addTestNotification; },\n/* harmony export */   addTestParentLink: function() { return /* binding */ addTestParentLink; },\n/* harmony export */   addTestSubmission: function() { return /* binding */ addTestSubmission; },\n/* harmony export */   countUnreadForThread: function() { return /* binding */ countUnreadForThread; },\n/* harmony export */   createTestThread: function() { return /* binding */ createTestThread; },\n/* harmony export */   deleteQuiz: function() { return /* binding */ deleteQuiz; },\n/* harmony export */   deleteTestAnnouncement: function() { return /* binding */ deleteTestAnnouncement; },\n/* harmony export */   deleteTestAssignment: function() { return /* binding */ deleteTestAssignment; },\n/* harmony export */   deleteTestCourse: function() { return /* binding */ deleteTestCourse; },\n/* harmony export */   deleteTestModule: function() { return /* binding */ deleteTestModule; },\n/* harmony export */   getAttemptForStudent: function() { return /* binding */ getAttemptForStudent; },\n/* harmony export */   getTestCourse: function() { return /* binding */ getTestCourse; },\n/* harmony export */   getTestFile: function() { return /* binding */ getTestFile; },\n/* harmony export */   getTestNotificationPreferences: function() { return /* binding */ getTestNotificationPreferences; },\n/* harmony export */   getTestProfile: function() { return /* binding */ getTestProfile; },\n/* harmony export */   gradeTestSubmission: function() { return /* binding */ gradeTestSubmission; },\n/* harmony export */   listAttemptsForQuiz: function() { return /* binding */ listAttemptsForQuiz; },\n/* harmony export */   listChoicesByQuestion: function() { return /* binding */ listChoicesByQuestion; },\n/* harmony export */   listQuestionsByQuiz: function() { return /* binding */ listQuestionsByQuiz; },\n/* harmony export */   listQuizzesByCourse: function() { return /* binding */ listQuizzesByCourse; },\n/* harmony export */   listTestAnnouncementsByCourse: function() { return /* binding */ listTestAnnouncementsByCourse; },\n/* harmony export */   listTestAssignmentsByCourse: function() { return /* binding */ listTestAssignmentsByCourse; },\n/* harmony export */   listTestCoursesByTeacher: function() { return /* binding */ listTestCoursesByTeacher; },\n/* harmony export */   listTestEnrollmentsByCourse: function() { return /* binding */ listTestEnrollmentsByCourse; },\n/* harmony export */   listTestEnrollmentsByStudent: function() { return /* binding */ listTestEnrollmentsByStudent; },\n/* harmony export */   listTestFeatureFlags: function() { return /* binding */ listTestFeatureFlags; },\n/* harmony export */   listTestLessonsByCourse: function() { return /* binding */ listTestLessonsByCourse; },\n/* harmony export */   listTestMessagesByThread: function() { return /* binding */ listTestMessagesByThread; },\n/* harmony export */   listTestModulesByCourse: function() { return /* binding */ listTestModulesByCourse; },\n/* harmony export */   listTestNotificationsByUser: function() { return /* binding */ listTestNotificationsByUser; },\n/* harmony export */   listTestParentChildren: function() { return /* binding */ listTestParentChildren; },\n/* harmony export */   listTestParentsForStudent: function() { return /* binding */ listTestParentsForStudent; },\n/* harmony export */   listTestParticipantsByThread: function() { return /* binding */ listTestParticipantsByThread; },\n/* harmony export */   listTestSubmissionsByAssignment: function() { return /* binding */ listTestSubmissionsByAssignment; },\n/* harmony export */   listTestThreadsByUser: function() { return /* binding */ listTestThreadsByUser; },\n/* harmony export */   markAllTestNotificationsRead: function() { return /* binding */ markAllTestNotificationsRead; },\n/* harmony export */   markAllThreadMessagesReadForUser: function() { return /* binding */ markAllThreadMessagesReadForUser; },\n/* harmony export */   markTestMessageReadForUser: function() { return /* binding */ markTestMessageReadForUser; },\n/* harmony export */   markTestNotificationRead: function() { return /* binding */ markTestNotificationRead; },\n/* harmony export */   removeTestParentLink: function() { return /* binding */ removeTestParentLink; },\n/* harmony export */   reorderTestLessons: function() { return /* binding */ reorderTestLessons; },\n/* harmony export */   resetTestStore: function() { return /* binding */ resetTestStore; },\n/* harmony export */   setTestFeatureFlag: function() { return /* binding */ setTestFeatureFlag; },\n/* harmony export */   setTestNotificationPreferences: function() { return /* binding */ setTestNotificationPreferences; },\n/* harmony export */   shouldDeliverTestNotification: function() { return /* binding */ shouldDeliverTestNotification; },\n/* harmony export */   startAttempt: function() { return /* binding */ startAttempt; },\n/* harmony export */   submitAttempt: function() { return /* binding */ submitAttempt; },\n/* harmony export */   updateQuiz: function() { return /* binding */ updateQuiz; },\n/* harmony export */   updateTestAssignment: function() { return /* binding */ updateTestAssignment; },\n/* harmony export */   updateTestModule: function() { return /* binding */ updateTestModule; },\n/* harmony export */   upsertAnswer: function() { return /* binding */ upsertAnswer; },\n/* harmony export */   upsertTestProfile: function() { return /* binding */ upsertTestProfile; }\n/* harmony export */ });\n/**\r\n * In-memory test store (dev/test only)\r\n *\r\n * Provides a lightweight, process-local data store used when `TEST_MODE`\r\n * is enabled. It simulates database behavior for e2e and unit tests, and\r\n * persists across Next.js HMR by attaching to `globalThis`.\r\n */ // Persist state across Next.js dev HMR by attaching to globalThis\nconst globalStore = globalThis;\nconst state = globalStore.__TEST_STORE__ || (globalStore.__TEST_STORE__ = {\n    courses: new Map(),\n    lessonsByCourse: new Map(),\n    modulesByCourse: new Map(),\n    enrollmentsByStudent: new Map(),\n    enrollmentsByCourse: new Map(),\n    profilesById: new Map(),\n    parentLinksByParent: new Map()\n});\n// Backfill maps if this module loaded after an older store shape was created (HMR during dev)\nconst anyState = state;\nif (!anyState.profilesById) anyState.profilesById = new Map();\nif (!anyState.parentLinksByParent) anyState.parentLinksByParent = new Map();\nif (!anyState.modulesByCourse) anyState.modulesByCourse = new Map();\nif (!anyState.assignmentsByCourse) anyState.assignmentsByCourse = new Map();\nif (!anyState.submissionsByAssignment) anyState.submissionsByAssignment = new Map();\n// Quizzes store maps (backfill if missing for HMR)\nif (!anyState.quizzesByCourse) anyState.quizzesByCourse = new Map();\nif (!anyState.questionsByQuiz) anyState.questionsByQuiz = new Map();\nif (!anyState.choicesByQuestion) anyState.choicesByQuestion = new Map();\nif (!anyState.attemptsByQuiz) anyState.attemptsByQuiz = new Map();\nif (!anyState.answersByAttempt) anyState.answersByAttempt = new Map();\nif (!anyState.announcementsByCourse) anyState.announcementsByCourse = new Map();\nif (!anyState.filesById) anyState.filesById = new Map();\n// Messaging maps\nif (!anyState.messageThreads) anyState.messageThreads = [];\nif (!anyState.participantsByThread) anyState.participantsByThread = new Map();\nif (!anyState.messagesByThread) anyState.messagesByThread = new Map();\nif (!anyState.readByMessage) anyState.readByMessage = new Map();\nif (!anyState.featureFlags) anyState.featureFlags = new Map();\nfunction addTestCourse(course) {\n    state.courses.set(course.id, course);\n}\nfunction getTestCourse(courseId) {\n    return state.courses.get(courseId);\n}\nfunction listTestCoursesByTeacher(teacherId) {\n    return Array.from(state.courses.values()).filter((c)=>c.teacher_id === teacherId);\n}\nfunction addTestLesson(lesson) {\n    var _state_lessonsByCourse_get;\n    const arr = (_state_lessonsByCourse_get = state.lessonsByCourse.get(lesson.course_id)) !== null && _state_lessonsByCourse_get !== void 0 ? _state_lessonsByCourse_get : [];\n    arr.push(lesson);\n    arr.sort((a, b)=>a.order_index - b.order_index);\n    state.lessonsByCourse.set(lesson.course_id, arr);\n}\nfunction listTestLessonsByCourse(courseId) {\n    var _state_lessonsByCourse_get;\n    return (_state_lessonsByCourse_get = state.lessonsByCourse.get(courseId)) !== null && _state_lessonsByCourse_get !== void 0 ? _state_lessonsByCourse_get : [];\n}\nfunction resetTestStore() {\n    var _state_assignmentsByCourse_clear, _state_assignmentsByCourse, _state_submissionsByAssignment_clear, _state_submissionsByAssignment, _state_quizzesByCourse_clear, _state_quizzesByCourse, _state_questionsByQuiz_clear, _state_questionsByQuiz, _state_choicesByQuestion_clear, _state_choicesByQuestion, _state_attemptsByQuiz_clear, _state_attemptsByQuiz, _state_answersByAttempt_clear, _state_answersByAttempt, _state_announcementsByCourse_clear, _state_announcementsByCourse, _state_participantsByThread_clear, _state_participantsByThread, _state_messagesByThread_clear, _state_messagesByThread, _state_filesById_clear, _state_filesById;\n    state.courses.clear();\n    state.lessonsByCourse.clear();\n    state.modulesByCourse.clear();\n    state.enrollmentsByStudent.clear();\n    state.enrollmentsByCourse.clear();\n    state.parentLinksByParent.clear();\n    (_state_assignmentsByCourse = state.assignmentsByCourse) === null || _state_assignmentsByCourse === void 0 ? void 0 : (_state_assignmentsByCourse_clear = _state_assignmentsByCourse.clear) === null || _state_assignmentsByCourse_clear === void 0 ? void 0 : _state_assignmentsByCourse_clear.call(_state_assignmentsByCourse);\n    (_state_submissionsByAssignment = state.submissionsByAssignment) === null || _state_submissionsByAssignment === void 0 ? void 0 : (_state_submissionsByAssignment_clear = _state_submissionsByAssignment.clear) === null || _state_submissionsByAssignment_clear === void 0 ? void 0 : _state_submissionsByAssignment_clear.call(_state_submissionsByAssignment);\n    (_state_quizzesByCourse = // Quizzes\n    state.quizzesByCourse) === null || _state_quizzesByCourse === void 0 ? void 0 : (_state_quizzesByCourse_clear = _state_quizzesByCourse.clear) === null || _state_quizzesByCourse_clear === void 0 ? void 0 : _state_quizzesByCourse_clear.call(_state_quizzesByCourse);\n    (_state_questionsByQuiz = state.questionsByQuiz) === null || _state_questionsByQuiz === void 0 ? void 0 : (_state_questionsByQuiz_clear = _state_questionsByQuiz.clear) === null || _state_questionsByQuiz_clear === void 0 ? void 0 : _state_questionsByQuiz_clear.call(_state_questionsByQuiz);\n    (_state_choicesByQuestion = state.choicesByQuestion) === null || _state_choicesByQuestion === void 0 ? void 0 : (_state_choicesByQuestion_clear = _state_choicesByQuestion.clear) === null || _state_choicesByQuestion_clear === void 0 ? void 0 : _state_choicesByQuestion_clear.call(_state_choicesByQuestion);\n    (_state_attemptsByQuiz = state.attemptsByQuiz) === null || _state_attemptsByQuiz === void 0 ? void 0 : (_state_attemptsByQuiz_clear = _state_attemptsByQuiz.clear) === null || _state_attemptsByQuiz_clear === void 0 ? void 0 : _state_attemptsByQuiz_clear.call(_state_attemptsByQuiz);\n    (_state_answersByAttempt = state.answersByAttempt) === null || _state_answersByAttempt === void 0 ? void 0 : (_state_answersByAttempt_clear = _state_answersByAttempt.clear) === null || _state_answersByAttempt_clear === void 0 ? void 0 : _state_answersByAttempt_clear.call(_state_answersByAttempt);\n    (_state_announcementsByCourse = state.announcementsByCourse) === null || _state_announcementsByCourse === void 0 ? void 0 : (_state_announcementsByCourse_clear = _state_announcementsByCourse.clear) === null || _state_announcementsByCourse_clear === void 0 ? void 0 : _state_announcementsByCourse_clear.call(_state_announcementsByCourse);\n    state.messageThreads = [];\n    (_state_participantsByThread = state.participantsByThread) === null || _state_participantsByThread === void 0 ? void 0 : (_state_participantsByThread_clear = _state_participantsByThread.clear) === null || _state_participantsByThread_clear === void 0 ? void 0 : _state_participantsByThread_clear.call(_state_participantsByThread);\n    (_state_messagesByThread = state.messagesByThread) === null || _state_messagesByThread === void 0 ? void 0 : (_state_messagesByThread_clear = _state_messagesByThread.clear) === null || _state_messagesByThread_clear === void 0 ? void 0 : _state_messagesByThread_clear.call(_state_messagesByThread);\n    (_state_filesById = state.filesById) === null || _state_filesById === void 0 ? void 0 : (_state_filesById_clear = _state_filesById.clear) === null || _state_filesById_clear === void 0 ? void 0 : _state_filesById_clear.call(_state_filesById);\n}\nfunction deleteTestCourse(courseId) {\n    state.courses.delete(courseId);\n    state.lessonsByCourse.delete(courseId);\n// Note: we intentionally do not clear enrollments to keep history unless needed\n}\nfunction reorderTestLessons(courseId, updates) {\n    var _state_lessonsByCourse_get;\n    const arr = (_state_lessonsByCourse_get = state.lessonsByCourse.get(courseId)) !== null && _state_lessonsByCourse_get !== void 0 ? _state_lessonsByCourse_get : [];\n    const byId = new Map(arr.map((l)=>[\n            l.id,\n            l\n        ]));\n    for (const u of updates){\n        const row = byId.get(u.id);\n        if (row) row.order_index = u.order_index;\n    }\n    arr.sort((a, b)=>a.order_index - b.order_index);\n    state.lessonsByCourse.set(courseId, arr);\n}\nfunction addTestModule(row) {\n    var _state_modulesByCourse_get;\n    const arr = (_state_modulesByCourse_get = state.modulesByCourse.get(row.course_id)) !== null && _state_modulesByCourse_get !== void 0 ? _state_modulesByCourse_get : [];\n    arr.push(row);\n    arr.sort((a, b)=>a.order_index - b.order_index);\n    state.modulesByCourse.set(row.course_id, arr);\n}\nfunction listTestModulesByCourse(courseId) {\n    var _state_modulesByCourse_get;\n    return (_state_modulesByCourse_get = state.modulesByCourse.get(courseId)) !== null && _state_modulesByCourse_get !== void 0 ? _state_modulesByCourse_get : [];\n}\nfunction updateTestModule(id, data) {\n    for (const [courseId, arr] of state.modulesByCourse.entries()){\n        const idx = arr.findIndex((m)=>m.id === id);\n        if (idx >= 0) {\n            const updated = {\n                ...arr[idx],\n                ...data\n            };\n            arr[idx] = updated;\n            arr.sort((a, b)=>a.order_index - b.order_index);\n            state.modulesByCourse.set(courseId, arr);\n            return updated;\n        }\n    }\n    return undefined;\n}\nfunction deleteTestModule(id) {\n    for (const [courseId, arr] of state.modulesByCourse.entries()){\n        const filtered = arr.filter((m)=>m.id !== id);\n        if (filtered.length !== arr.length) {\n            state.modulesByCourse.set(courseId, filtered);\n            break;\n        }\n    }\n}\nfunction addTestEnrollment(row) {\n    var _state_enrollmentsByStudent_get;\n    const a = (_state_enrollmentsByStudent_get = state.enrollmentsByStudent.get(row.student_id)) !== null && _state_enrollmentsByStudent_get !== void 0 ? _state_enrollmentsByStudent_get : [];\n    a.push(row);\n    state.enrollmentsByStudent.set(row.student_id, a);\n    var _state_enrollmentsByCourse_get;\n    const b = (_state_enrollmentsByCourse_get = state.enrollmentsByCourse.get(row.course_id)) !== null && _state_enrollmentsByCourse_get !== void 0 ? _state_enrollmentsByCourse_get : [];\n    b.push(row);\n    state.enrollmentsByCourse.set(row.course_id, b);\n}\nfunction listTestEnrollmentsByStudent(studentId) {\n    var _state_enrollmentsByStudent_get;\n    return (_state_enrollmentsByStudent_get = state.enrollmentsByStudent.get(studentId)) !== null && _state_enrollmentsByStudent_get !== void 0 ? _state_enrollmentsByStudent_get : [];\n}\nfunction listTestEnrollmentsByCourse(courseId) {\n    var _state_enrollmentsByCourse_get;\n    return (_state_enrollmentsByCourse_get = state.enrollmentsByCourse.get(courseId)) !== null && _state_enrollmentsByCourse_get !== void 0 ? _state_enrollmentsByCourse_get : [];\n}\nfunction upsertTestProfile(profile) {\n    state.profilesById.set(profile.id, profile);\n}\nfunction getTestProfile(id) {\n    return state.profilesById.get(id);\n}\nfunction addTestParentLink(row) {\n    var _state_parentLinksByParent_get;\n    const a = (_state_parentLinksByParent_get = state.parentLinksByParent.get(row.parent_id)) !== null && _state_parentLinksByParent_get !== void 0 ? _state_parentLinksByParent_get : [];\n    a.push(row);\n    state.parentLinksByParent.set(row.parent_id, a);\n}\nfunction listTestParentChildren(parentId) {\n    var _state_parentLinksByParent_get;\n    return (_state_parentLinksByParent_get = state.parentLinksByParent.get(parentId)) !== null && _state_parentLinksByParent_get !== void 0 ? _state_parentLinksByParent_get : [];\n}\nfunction removeTestParentLink(parentId, studentId) {\n    var _state_parentLinksByParent_get;\n    const a = (_state_parentLinksByParent_get = state.parentLinksByParent.get(parentId)) !== null && _state_parentLinksByParent_get !== void 0 ? _state_parentLinksByParent_get : [];\n    const b = a.filter((x)=>x.student_id !== studentId);\n    state.parentLinksByParent.set(parentId, b);\n}\nfunction listTestParentsForStudent(studentId) {\n    const res = [];\n    for (const [pid, arr] of state.parentLinksByParent.entries()){\n        if ((arr !== null && arr !== void 0 ? arr : []).some((pl)=>pl.student_id === studentId)) res.push(pid);\n    }\n    return res;\n}\n// Announcements helpers (test-mode)\nfunction addTestAnnouncement(row) {\n    const s = state;\n    var _s_announcementsByCourse_get;\n    const arr = (_s_announcementsByCourse_get = s.announcementsByCourse.get(row.course_id)) !== null && _s_announcementsByCourse_get !== void 0 ? _s_announcementsByCourse_get : [];\n    arr.unshift(row);\n    s.announcementsByCourse.set(row.course_id, arr);\n}\nfunction listTestAnnouncementsByCourse(courseId) {\n    const s = state;\n    var _s_announcementsByCourse_get;\n    return ((_s_announcementsByCourse_get = s.announcementsByCourse.get(courseId)) !== null && _s_announcementsByCourse_get !== void 0 ? _s_announcementsByCourse_get : []).slice();\n}\nfunction deleteTestAnnouncement(id) {\n    const s = state;\n    for (const [cid, arr] of s.announcementsByCourse.entries()){\n        const next = arr.filter((x)=>x.id !== id);\n        if (next.length !== arr.length) {\n            s.announcementsByCourse.set(cid, next);\n            return {\n                ok: true\n            };\n        }\n    }\n    return {\n        ok: false\n    };\n}\n// ===== Messaging helpers (test-mode) =====\nfunction createTestThread(participantIds, roles) {\n    const id = makeId(\"th\");\n    const created_at = new Date().toISOString();\n    const s = state;\n    s.messageThreads.push({\n        id,\n        created_at\n    });\n    const parts = participantIds.map((uid)=>{\n        var _roles_uid;\n        return {\n            thread_id: id,\n            user_id: uid,\n            role: (_roles_uid = roles === null || roles === void 0 ? void 0 : roles[uid]) !== null && _roles_uid !== void 0 ? _roles_uid : \"user\",\n            added_at: created_at\n        };\n    });\n    s.participantsByThread.set(id, parts);\n    return {\n        id,\n        created_at\n    };\n}\nfunction listTestThreadsByUser(userId) {\n    const s = state;\n    const res = [];\n    for (const t of s.messageThreads){\n        var _s_participantsByThread_get;\n        const parts = (_s_participantsByThread_get = s.participantsByThread.get(t.id)) !== null && _s_participantsByThread_get !== void 0 ? _s_participantsByThread_get : [];\n        if (parts.some((p)=>p.user_id === userId)) res.push(t);\n    }\n    // newest first\n    res.sort((a, b)=>b.created_at.localeCompare(a.created_at));\n    return res;\n}\nfunction addTestMessage(row) {\n    const id = makeId(\"ms\");\n    const created_at = new Date().toISOString();\n    const msg = {\n        id,\n        thread_id: row.thread_id,\n        sender_id: row.sender_id,\n        body: row.body,\n        created_at,\n        read_at: null\n    };\n    const s = state;\n    var _s_messagesByThread_get;\n    const arr = (_s_messagesByThread_get = s.messagesByThread.get(row.thread_id)) !== null && _s_messagesByThread_get !== void 0 ? _s_messagesByThread_get : [];\n    arr.push(msg);\n    arr.sort((a, b)=>a.created_at.localeCompare(b.created_at));\n    s.messagesByThread.set(row.thread_id, arr);\n    // Initialize read receipts map\n    if (!s.readByMessage) s.readByMessage = new Map();\n    s.readByMessage.set(id, new Set());\n    return msg;\n}\nfunction listTestMessagesByThread(threadId) {\n    const s = state;\n    var _s_messagesByThread_get;\n    return ((_s_messagesByThread_get = s.messagesByThread.get(threadId)) !== null && _s_messagesByThread_get !== void 0 ? _s_messagesByThread_get : []).slice();\n}\nfunction markTestMessageReadForUser(messageId, userId) {\n    const s = state;\n    if (!s.readByMessage) s.readByMessage = new Map();\n    var _s_readByMessage_get;\n    const set = (_s_readByMessage_get = s.readByMessage.get(messageId)) !== null && _s_readByMessage_get !== void 0 ? _s_readByMessage_get : new Set();\n    set.add(userId);\n    s.readByMessage.set(messageId, set);\n    // Keep legacy read_at for basic UIs\n    for (const [tid, arr] of s.messagesByThread.entries()){\n        const idx = arr.findIndex((m)=>m.id === messageId);\n        if (idx >= 0) {\n            if (!arr[idx].read_at) arr[idx] = {\n                ...arr[idx],\n                read_at: new Date().toISOString()\n            };\n            s.messagesByThread.set(tid, arr);\n            return arr[idx];\n        }\n    }\n    return null;\n}\nfunction countUnreadForThread(threadId, userId) {\n    const s = state;\n    if (!s.readByMessage) s.readByMessage = new Map();\n    var _s_messagesByThread_get;\n    const msgs = (_s_messagesByThread_get = s.messagesByThread.get(threadId)) !== null && _s_messagesByThread_get !== void 0 ? _s_messagesByThread_get : [];\n    let count = 0;\n    for (const m of msgs){\n        if (m.sender_id === userId) continue;\n        const readSet = s.readByMessage.get(m.id);\n        if (!readSet || !readSet.has(userId)) count++;\n    }\n    return count;\n}\nfunction markAllThreadMessagesReadForUser(threadId, userId) {\n    const s = state;\n    if (!s.readByMessage) s.readByMessage = new Map();\n    var _s_messagesByThread_get;\n    const msgs = (_s_messagesByThread_get = s.messagesByThread.get(threadId)) !== null && _s_messagesByThread_get !== void 0 ? _s_messagesByThread_get : [];\n    for (const m of msgs){\n        if (m.sender_id === userId) continue;\n        var _s_readByMessage_get;\n        const set = (_s_readByMessage_get = s.readByMessage.get(m.id)) !== null && _s_readByMessage_get !== void 0 ? _s_readByMessage_get : new Set();\n        set.add(userId);\n        s.readByMessage.set(m.id, set);\n    }\n    return {\n        ok: true\n    };\n}\n// ===== Feature Flags (test-mode) =====\nfunction listTestFeatureFlags() {\n    const s = state;\n    if (!s.featureFlags) s.featureFlags = new Map();\n    const obj = {};\n    for (const [k, v] of s.featureFlags.entries())obj[k] = !!v;\n    return obj;\n}\nfunction setTestFeatureFlag(key, value) {\n    const s = state;\n    if (!s.featureFlags) s.featureFlags = new Map();\n    s.featureFlags.set(key, !!value);\n    return {\n        key,\n        value: !!value\n    };\n}\nfunction listTestParticipantsByThread(threadId) {\n    const s = state;\n    var _s_participantsByThread_get;\n    return ((_s_participantsByThread_get = s.participantsByThread.get(threadId)) !== null && _s_participantsByThread_get !== void 0 ? _s_participantsByThread_get : []).slice();\n}\n// ===== Notifications helpers (test-mode) =====\nfunction addTestNotification(row) {\n    const s = state;\n    if (!s.notificationsByUser) s.notificationsByUser = new Map();\n    var _row_id;\n    const id = (_row_id = row.id) !== null && _row_id !== void 0 ? _row_id : makeId(\"no\");\n    const created_at = new Date().toISOString();\n    var _row_payload;\n    const obj = {\n        id,\n        user_id: row.user_id,\n        type: row.type,\n        payload: (_row_payload = row.payload) !== null && _row_payload !== void 0 ? _row_payload : {},\n        created_at,\n        read_at: null\n    };\n    var _s_notificationsByUser_get;\n    const arr = (_s_notificationsByUser_get = s.notificationsByUser.get(row.user_id)) !== null && _s_notificationsByUser_get !== void 0 ? _s_notificationsByUser_get : [];\n    arr.unshift(obj);\n    s.notificationsByUser.set(row.user_id, arr);\n    return obj;\n}\nfunction listTestNotificationsByUser(userId) {\n    const s = state;\n    if (!s.notificationsByUser) s.notificationsByUser = new Map();\n    var _s_notificationsByUser_get;\n    return ((_s_notificationsByUser_get = s.notificationsByUser.get(userId)) !== null && _s_notificationsByUser_get !== void 0 ? _s_notificationsByUser_get : []).slice();\n}\nfunction markTestNotificationRead(id) {\n    const s = state;\n    if (!s.notificationsByUser) s.notificationsByUser = new Map();\n    for (const [uid, arr] of s.notificationsByUser.entries()){\n        const idx = arr.findIndex((n)=>n.id === id);\n        if (idx >= 0) {\n            arr[idx] = {\n                ...arr[idx],\n                read_at: new Date().toISOString()\n            };\n            s.notificationsByUser.set(uid, arr);\n            return arr[idx];\n        }\n    }\n    return null;\n}\nfunction markAllTestNotificationsRead(userId) {\n    const s = state;\n    if (!s.notificationsByUser) s.notificationsByUser = new Map();\n    var _s_notificationsByUser_get;\n    const arr = ((_s_notificationsByUser_get = s.notificationsByUser.get(userId)) !== null && _s_notificationsByUser_get !== void 0 ? _s_notificationsByUser_get : []).map((n)=>{\n        var _n_read_at;\n        return {\n            ...n,\n            read_at: (_n_read_at = n.read_at) !== null && _n_read_at !== void 0 ? _n_read_at : new Date().toISOString()\n        };\n    });\n    s.notificationsByUser.set(userId, arr);\n    return {\n        ok: true\n    };\n}\nconst DEFAULT_PREFS = {\n    \"assignment:new\": true,\n    \"submission:graded\": true,\n    \"message:new\": true,\n    \"announcement:published\": true,\n    \"quiz:due-soon\": true\n};\nfunction getTestNotificationPreferences(userId) {\n    const s = state;\n    if (!s.notificationPrefsByUser) s.notificationPrefsByUser = new Map();\n    const current = s.notificationPrefsByUser.get(userId);\n    if (current) return {\n        ...DEFAULT_PREFS,\n        ...current\n    };\n    return {\n        ...DEFAULT_PREFS\n    };\n}\nfunction setTestNotificationPreferences(userId, partial) {\n    const s = state;\n    if (!s.notificationPrefsByUser) s.notificationPrefsByUser = new Map();\n    const merged = {\n        ...getTestNotificationPreferences(userId),\n        ...partial\n    };\n    s.notificationPrefsByUser.set(userId, merged);\n    return merged;\n}\nfunction shouldDeliverTestNotification(userId, type) {\n    const prefs = getTestNotificationPreferences(userId);\n    const val = prefs[type];\n    return val === undefined ? true : !!val;\n}\n// Assignments helpers\nfunction addTestAssignment(row) {\n    const s = state;\n    var _s_assignmentsByCourse_get;\n    const arr = (_s_assignmentsByCourse_get = s.assignmentsByCourse.get(row.course_id)) !== null && _s_assignmentsByCourse_get !== void 0 ? _s_assignmentsByCourse_get : [];\n    arr.push(row);\n    arr.sort((a, b)=>new Date(b.created_at).getTime() - new Date(a.created_at).getTime());\n    s.assignmentsByCourse.set(row.course_id, arr);\n}\nfunction listTestAssignmentsByCourse(courseId) {\n    const s = state;\n    var _s_assignmentsByCourse_get;\n    return (_s_assignmentsByCourse_get = s.assignmentsByCourse.get(courseId)) !== null && _s_assignmentsByCourse_get !== void 0 ? _s_assignmentsByCourse_get : [];\n}\nfunction updateTestAssignment(id, data) {\n    const s = state;\n    for (const [courseId, arr] of s.assignmentsByCourse.entries()){\n        const idx = arr.findIndex((x)=>x.id === id);\n        if (idx >= 0) {\n            const next = {\n                ...arr[idx],\n                ...data\n            };\n            arr[idx] = next;\n            s.assignmentsByCourse.set(courseId, arr);\n            return next;\n        }\n    }\n    return null;\n}\nfunction deleteTestAssignment(id) {\n    const s = state;\n    for (const [courseId, arr] of s.assignmentsByCourse.entries()){\n        const next = arr.filter((x)=>x.id !== id);\n        s.assignmentsByCourse.set(courseId, next);\n    }\n    return {\n        ok: true\n    };\n}\n// ===== Files (test-mode) =====\nfunction addTestFile(input) {\n    const id = makeId(\"f\");\n    const row = {\n        id,\n        owner_type: input.owner_type,\n        owner_id: input.owner_id,\n        content_type: input.content_type,\n        data_base64: input.data_base64,\n        created_at: new Date().toISOString()\n    };\n    const s = state;\n    s.filesById.set(id, row);\n    return row;\n}\nfunction getTestFile(id) {\n    const s = state;\n    var _s_filesById_get;\n    return (_s_filesById_get = s.filesById.get(id)) !== null && _s_filesById_get !== void 0 ? _s_filesById_get : null;\n}\n// Submissions helpers\nfunction addTestSubmission(row) {\n    const s = state;\n    var _s_submissionsByAssignment_get;\n    const arr = (_s_submissionsByAssignment_get = s.submissionsByAssignment.get(row.assignment_id)) !== null && _s_submissionsByAssignment_get !== void 0 ? _s_submissionsByAssignment_get : [];\n    arr.unshift(row);\n    s.submissionsByAssignment.set(row.assignment_id, arr);\n}\nfunction listTestSubmissionsByAssignment(assignmentId) {\n    const s = state;\n    var _s_submissionsByAssignment_get;\n    return (_s_submissionsByAssignment_get = s.submissionsByAssignment.get(assignmentId)) !== null && _s_submissionsByAssignment_get !== void 0 ? _s_submissionsByAssignment_get : [];\n}\nfunction gradeTestSubmission(id, data) {\n    const s = state;\n    for (const [aid, arr] of s.submissionsByAssignment.entries()){\n        const idx = arr.findIndex((x)=>x.id === id);\n        if (idx >= 0) {\n            var _data_feedback;\n            const next = {\n                ...arr[idx],\n                score: data.score,\n                feedback: (_data_feedback = data.feedback) !== null && _data_feedback !== void 0 ? _data_feedback : null\n            };\n            arr[idx] = next;\n            s.submissionsByAssignment.set(aid, arr);\n            return next;\n        }\n    }\n    return null;\n}\nfunction makeId(_prefix) {\n    const hex = \"0123456789abcdef\";\n    const rand = (n)=>Array.from({\n            length: n\n        }, ()=>hex[Math.floor(Math.random() * hex.length)]).join(\"\");\n    const s1 = rand(8);\n    const s2 = rand(4);\n    const s3 = rand(4);\n    const s4 = rand(4);\n    const s5 = rand(12);\n    return \"\".concat(s1, \"-\").concat(s2, \"-\").concat(s3, \"-\").concat(s4, \"-\").concat(s5);\n}\nfunction addQuiz(input) {\n    var _input_time_limit_sec, _input_points;\n    const row = {\n        id: makeId(\"q\"),\n        course_id: input.course_id,\n        title: input.title,\n        time_limit_sec: (_input_time_limit_sec = input.time_limit_sec) !== null && _input_time_limit_sec !== void 0 ? _input_time_limit_sec : null,\n        points: (_input_points = input.points) !== null && _input_points !== void 0 ? _input_points : 100,\n        created_at: new Date().toISOString()\n    };\n    const s = state;\n    var _s_quizzesByCourse_get;\n    const arr = (_s_quizzesByCourse_get = s.quizzesByCourse.get(row.course_id)) !== null && _s_quizzesByCourse_get !== void 0 ? _s_quizzesByCourse_get : [];\n    arr.unshift(row);\n    s.quizzesByCourse.set(row.course_id, arr);\n    return row;\n}\nfunction listQuizzesByCourse(courseId) {\n    const s = state;\n    var _s_quizzesByCourse_get;\n    return ((_s_quizzesByCourse_get = s.quizzesByCourse.get(courseId)) !== null && _s_quizzesByCourse_get !== void 0 ? _s_quizzesByCourse_get : []).slice();\n}\nfunction updateQuiz(id, data) {\n    const s = state;\n    for (const [courseId, arr] of s.quizzesByCourse.entries()){\n        const idx = arr.findIndex((q)=>q.id === id);\n        if (idx >= 0) {\n            const q = arr[idx];\n            const updated = {\n                ...q,\n                ...data\n            };\n            arr[idx] = updated;\n            s.quizzesByCourse.set(courseId, arr);\n            return updated;\n        }\n    }\n    return null;\n}\nfunction deleteQuiz(id) {\n    const s = state;\n    for (const [courseId, arr] of s.quizzesByCourse.entries()){\n        const next = arr.filter((q)=>q.id !== id);\n        if (next.length !== arr.length) {\n            s.quizzesByCourse.set(courseId, next);\n            // Cascade: remove questions for this quiz\n            s.questionsByQuiz.delete(id);\n            return {\n                ok: true\n            };\n        }\n    }\n    return {\n        ok: false\n    };\n}\nfunction addQuestion(input) {\n    var _input_order_index;\n    const row = {\n        id: makeId(\"r\"),\n        quiz_id: input.quiz_id,\n        text: input.text,\n        order_index: (_input_order_index = input.order_index) !== null && _input_order_index !== void 0 ? _input_order_index : 1\n    };\n    const s = state;\n    var _s_questionsByQuiz_get;\n    const arr = (_s_questionsByQuiz_get = s.questionsByQuiz.get(row.quiz_id)) !== null && _s_questionsByQuiz_get !== void 0 ? _s_questionsByQuiz_get : [];\n    arr.push(row);\n    arr.sort((a, b)=>a.order_index - b.order_index);\n    s.questionsByQuiz.set(row.quiz_id, arr);\n    return row;\n}\nfunction listQuestionsByQuiz(quizId) {\n    const s = state;\n    var _s_questionsByQuiz_get;\n    return ((_s_questionsByQuiz_get = s.questionsByQuiz.get(quizId)) !== null && _s_questionsByQuiz_get !== void 0 ? _s_questionsByQuiz_get : []).slice();\n}\nfunction addChoice(input) {\n    var _input_order_index;\n    const row = {\n        id: makeId(\"s\"),\n        question_id: input.question_id,\n        text: input.text,\n        correct: input.correct,\n        order_index: (_input_order_index = input.order_index) !== null && _input_order_index !== void 0 ? _input_order_index : 1\n    };\n    const s = state;\n    var _s_choicesByQuestion_get;\n    const arr = (_s_choicesByQuestion_get = s.choicesByQuestion.get(row.question_id)) !== null && _s_choicesByQuestion_get !== void 0 ? _s_choicesByQuestion_get : [];\n    arr.push(row);\n    arr.sort((a, b)=>a.order_index - b.order_index);\n    s.choicesByQuestion.set(row.question_id, arr);\n    return row;\n}\nfunction listChoicesByQuestion(questionId) {\n    const s = state;\n    var _s_choicesByQuestion_get;\n    return ((_s_choicesByQuestion_get = s.choicesByQuestion.get(questionId)) !== null && _s_choicesByQuestion_get !== void 0 ? _s_choicesByQuestion_get : []).slice();\n}\nfunction startAttempt(input) {\n    const row = {\n        id: makeId(\"t\"),\n        quiz_id: input.quiz_id,\n        student_id: input.student_id,\n        started_at: new Date().toISOString(),\n        submitted_at: null,\n        score: 0\n    };\n    const s = state;\n    var _s_attemptsByQuiz_get;\n    const arr = (_s_attemptsByQuiz_get = s.attemptsByQuiz.get(row.quiz_id)) !== null && _s_attemptsByQuiz_get !== void 0 ? _s_attemptsByQuiz_get : [];\n    arr.push(row);\n    s.attemptsByQuiz.set(row.quiz_id, arr);\n    return row;\n}\nfunction upsertAnswer(input) {\n    const s = state;\n    var _s_answersByAttempt_get;\n    const ansArr = (_s_answersByAttempt_get = s.answersByAttempt.get(input.attempt_id)) !== null && _s_answersByAttempt_get !== void 0 ? _s_answersByAttempt_get : [];\n    const idx = ansArr.findIndex((a)=>a.question_id === input.question_id);\n    const row = idx >= 0 ? {\n        ...ansArr[idx],\n        choice_id: input.choice_id,\n        created_at: new Date().toISOString()\n    } : {\n        id: makeId(\"u\"),\n        attempt_id: input.attempt_id,\n        question_id: input.question_id,\n        choice_id: input.choice_id,\n        created_at: new Date().toISOString()\n    };\n    if (idx >= 0) ansArr[idx] = row;\n    else ansArr.push(row);\n    s.answersByAttempt.set(input.attempt_id, ansArr);\n    return row;\n}\nfunction submitAttempt(input) {\n    const s = state;\n    let attempt;\n    let quizId;\n    for (const [qid, arr] of s.attemptsByQuiz.entries()){\n        const found = arr.find((a)=>a.id === input.attempt_id);\n        if (found) {\n            attempt = found;\n            quizId = qid;\n            break;\n        }\n    }\n    if (!attempt || !quizId) return null;\n    var _s_questionsByQuiz_get;\n    const questions = (_s_questionsByQuiz_get = s.questionsByQuiz.get(quizId)) !== null && _s_questionsByQuiz_get !== void 0 ? _s_questionsByQuiz_get : [];\n    const total = questions.length;\n    var _s_answersByAttempt_get;\n    const answers = (_s_answersByAttempt_get = s.answersByAttempt.get(attempt.id)) !== null && _s_answersByAttempt_get !== void 0 ? _s_answersByAttempt_get : [];\n    let correct = 0;\n    for (const q of questions){\n        const a = answers.find((x)=>x.question_id === q.id);\n        if (!a) continue;\n        var _s_choicesByQuestion_get;\n        const choices = (_s_choicesByQuestion_get = s.choicesByQuestion.get(q.id)) !== null && _s_choicesByQuestion_get !== void 0 ? _s_choicesByQuestion_get : [];\n        const correctChoice = choices.find((c)=>c.correct);\n        if (correctChoice && a.choice_id === correctChoice.id) correct++;\n    }\n    let quizPoints = 100;\n    for (const [, quizzes] of s.quizzesByCourse.entries()){\n        const match = quizzes.find((q)=>q.id === quizId);\n        if (match) {\n            quizPoints = match.points;\n            break;\n        }\n    }\n    const score = total > 0 ? Math.round(correct / total * quizPoints) : 0;\n    attempt.submitted_at = new Date().toISOString();\n    attempt.score = score;\n    return attempt;\n}\nfunction listAttemptsForQuiz(quiz_id) {\n    const s = state;\n    var _s_attemptsByQuiz_get;\n    return ((_s_attemptsByQuiz_get = s.attemptsByQuiz.get(quiz_id)) !== null && _s_attemptsByQuiz_get !== void 0 ? _s_attemptsByQuiz_get : []).slice();\n}\nfunction getAttemptForStudent(quiz_id, student_id) {\n    const s = state;\n    var _s_attemptsByQuiz_get;\n    const arr = (_s_attemptsByQuiz_get = s.attemptsByQuiz.get(quiz_id)) !== null && _s_attemptsByQuiz_get !== void 0 ? _s_attemptsByQuiz_get : [];\n    const mine = arr.filter((a)=>a.student_id === student_id);\n    if (mine.length === 0) return null;\n    mine.sort((a, b)=>b.started_at.localeCompare(a.started_at));\n    return mine[0];\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/testStore.ts\n"));

/***/ })

}]);