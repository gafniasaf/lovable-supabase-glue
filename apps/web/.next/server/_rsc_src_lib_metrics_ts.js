"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_rsc_src_lib_metrics_ts";
exports.ids = ["_rsc_src_lib_metrics_ts"];
exports.modules = {

/***/ "(rsc)/./src/lib/metrics.ts":
/*!****************************!*\
  !*** ./src/lib/metrics.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decrInFlight: () => (/* binding */ decrInFlight),\n/* harmony export */   getCounters: () => (/* binding */ getCounters),\n/* harmony export */   incrCounter: () => (/* binding */ incrCounter),\n/* harmony export */   incrInFlight: () => (/* binding */ incrInFlight),\n/* harmony export */   recordError: () => (/* binding */ recordError),\n/* harmony export */   recordTiming: () => (/* binding */ recordTiming),\n/* harmony export */   snapshot: () => (/* binding */ snapshot)\n/* harmony export */ });\n/**\r\n * Minimal in-memory metrics collector for p50/p95 route timings and error counts.\r\n * Intended for local/dev visibility. For production, wire to a metrics backend.\r\n */ const timings = new Map();\nconst errors = new Map();\nconst counters = new Map();\nconst inFlight = new Map();\nfunction sanitizeKey(key) {\n    try {\n        // Keep path only, strip query and collapse UUIDs to :id to control cardinality\n        const url = new URL(key, \"http://local\");\n        const path = url.pathname || key;\n        return path.replace(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/ig, \":id\");\n    } catch  {\n        return (key || \"\").split(\"?\")[0].replace(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}/ig, \":id\");\n    }\n}\nfunction recordTiming(routeKey, ms) {\n    const safeKey = sanitizeKey(routeKey);\n    const arr = timings.get(safeKey) ?? [];\n    arr.push(ms);\n    if (arr.length > 1000) arr.shift();\n    timings.set(safeKey, arr);\n}\nfunction recordError(routeKey) {\n    const safeKey = sanitizeKey(routeKey);\n    errors.set(safeKey, (errors.get(safeKey) ?? 0) + 1);\n}\nfunction incrInFlight(routeKey) {\n    const safeKey = sanitizeKey(routeKey);\n    inFlight.set(safeKey, (inFlight.get(safeKey) ?? 0) + 1);\n}\nfunction decrInFlight(routeKey) {\n    const safeKey = sanitizeKey(routeKey);\n    const cur = (inFlight.get(safeKey) ?? 0) - 1;\n    inFlight.set(safeKey, Math.max(0, cur));\n}\nfunction percentile(arr, p) {\n    if (arr.length === 0) return 0;\n    const sorted = [\n        ...arr\n    ].sort((a, b)=>a - b);\n    const idx = Math.floor(p / 100 * (sorted.length - 1));\n    return sorted[idx] ?? sorted[sorted.length - 1] ?? 0;\n}\nfunction snapshot() {\n    const out = {};\n    const keys = new Set([\n        ...timings.keys(),\n        ...errors.keys(),\n        ...inFlight.keys()\n    ]);\n    for (const k of keys){\n        const arr = timings.get(k) ?? [];\n        out[k] = {\n            count: arr.length,\n            p50: percentile(arr, 50),\n            p95: percentile(arr, 95),\n            p99: percentile(arr, 99),\n            errors: errors.get(k) ?? 0,\n            in_flight: inFlight.get(k) ?? 0\n        };\n    }\n    return out;\n}\nfunction incrCounter(name, by = 1) {\n    counters.set(name, (counters.get(name) ?? 0) + by);\n}\nfunction getCounters() {\n    return Object.fromEntries(counters.entries());\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL21ldHJpY3MudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBOzs7Q0FHQyxHQUlELE1BQU1BLFVBQVUsSUFBSUM7QUFDcEIsTUFBTUMsU0FBUyxJQUFJRDtBQUNuQixNQUFNRSxXQUFXLElBQUlGO0FBQ3JCLE1BQU1HLFdBQVcsSUFBSUg7QUFFckIsU0FBU0ksWUFBWUMsR0FBVztJQUM5QixJQUFJO1FBQ0YsK0VBQStFO1FBQy9FLE1BQU1DLE1BQU0sSUFBSUMsSUFBSUYsS0FBSztRQUN6QixNQUFNRyxPQUFPRixJQUFJRyxRQUFRLElBQUlKO1FBQzdCLE9BQU9HLEtBQUtFLE9BQU8sQ0FBQyxrRUFBa0U7SUFDeEYsRUFBRSxPQUFNO1FBQ04sT0FBTyxDQUFDTCxPQUFPLEVBQUMsRUFBR00sS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUNELE9BQU8sQ0FBQyxrRUFBa0U7SUFDN0c7QUFDRjtBQUVPLFNBQVNFLGFBQWFDLFFBQWtCLEVBQUVDLEVBQVU7SUFDekQsTUFBTUMsVUFBVVgsWUFBWVM7SUFDNUIsTUFBTUcsTUFBTWpCLFFBQVFrQixHQUFHLENBQUNGLFlBQVksRUFBRTtJQUN0Q0MsSUFBSUUsSUFBSSxDQUFDSjtJQUNULElBQUlFLElBQUlHLE1BQU0sR0FBRyxNQUFNSCxJQUFJSSxLQUFLO0lBQ2hDckIsUUFBUXNCLEdBQUcsQ0FBQ04sU0FBU0M7QUFDdkI7QUFFTyxTQUFTTSxZQUFZVCxRQUFrQjtJQUM1QyxNQUFNRSxVQUFVWCxZQUFZUztJQUM1QlosT0FBT29CLEdBQUcsQ0FBQ04sU0FBUyxDQUFDZCxPQUFPZ0IsR0FBRyxDQUFDRixZQUFZLEtBQUs7QUFDbkQ7QUFFTyxTQUFTUSxhQUFhVixRQUFrQjtJQUM3QyxNQUFNRSxVQUFVWCxZQUFZUztJQUM1QlYsU0FBU2tCLEdBQUcsQ0FBQ04sU0FBUyxDQUFDWixTQUFTYyxHQUFHLENBQUNGLFlBQVksS0FBSztBQUN2RDtBQUVPLFNBQVNTLGFBQWFYLFFBQWtCO0lBQzdDLE1BQU1FLFVBQVVYLFlBQVlTO0lBQzVCLE1BQU1ZLE1BQU0sQ0FBQ3RCLFNBQVNjLEdBQUcsQ0FBQ0YsWUFBWSxLQUFLO0lBQzNDWixTQUFTa0IsR0FBRyxDQUFDTixTQUFTVyxLQUFLQyxHQUFHLENBQUMsR0FBR0Y7QUFDcEM7QUFFQSxTQUFTRyxXQUFXWixHQUFhLEVBQUVhLENBQVM7SUFDMUMsSUFBSWIsSUFBSUcsTUFBTSxLQUFLLEdBQUcsT0FBTztJQUM3QixNQUFNVyxTQUFTO1dBQUlkO0tBQUksQ0FBQ2UsSUFBSSxDQUFDLENBQUNDLEdBQUdDLElBQU1ELElBQUlDO0lBQzNDLE1BQU1DLE1BQU1SLEtBQUtTLEtBQUssQ0FBQyxJQUFLLE1BQVFMLENBQUFBLE9BQU9YLE1BQU0sR0FBRztJQUNwRCxPQUFPVyxNQUFNLENBQUNJLElBQUksSUFBSUosTUFBTSxDQUFDQSxPQUFPWCxNQUFNLEdBQUcsRUFBRSxJQUFJO0FBQ3JEO0FBRU8sU0FBU2lCO0lBQ2QsTUFBTUMsTUFBMkIsQ0FBQztJQUNsQyxNQUFNQyxPQUFPLElBQUlDLElBQVk7V0FBSXhDLFFBQVF1QyxJQUFJO1dBQU9yQyxPQUFPcUMsSUFBSTtXQUFPbkMsU0FBU21DLElBQUk7S0FBRztJQUN0RixLQUFLLE1BQU1FLEtBQUtGLEtBQU07UUFDcEIsTUFBTXRCLE1BQU1qQixRQUFRa0IsR0FBRyxDQUFDdUIsTUFBTSxFQUFFO1FBQ2hDSCxHQUFHLENBQUNHLEVBQUUsR0FBRztZQUNQQyxPQUFPekIsSUFBSUcsTUFBTTtZQUNqQnVCLEtBQUtkLFdBQVdaLEtBQUs7WUFDckIyQixLQUFLZixXQUFXWixLQUFLO1lBQ3JCNEIsS0FBS2hCLFdBQVdaLEtBQUs7WUFDckJmLFFBQVFBLE9BQU9nQixHQUFHLENBQUN1QixNQUFNO1lBQ3pCSyxXQUFXMUMsU0FBU2MsR0FBRyxDQUFDdUIsTUFBTTtRQUNoQztJQUNGO0lBQ0EsT0FBT0g7QUFDVDtBQUVPLFNBQVNTLFlBQVlDLElBQVksRUFBRUMsS0FBYSxDQUFDO0lBQ3REOUMsU0FBU21CLEdBQUcsQ0FBQzBCLE1BQU0sQ0FBQzdDLFNBQVNlLEdBQUcsQ0FBQzhCLFNBQVMsS0FBS0M7QUFDakQ7QUFFTyxTQUFTQztJQUNkLE9BQU9DLE9BQU9DLFdBQVcsQ0FBQ2pELFNBQVNrRCxPQUFPO0FBQzVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViLy4vc3JjL2xpYi9tZXRyaWNzLnRzPzMwNTQiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIE1pbmltYWwgaW4tbWVtb3J5IG1ldHJpY3MgY29sbGVjdG9yIGZvciBwNTAvcDk1IHJvdXRlIHRpbWluZ3MgYW5kIGVycm9yIGNvdW50cy5cclxuICogSW50ZW5kZWQgZm9yIGxvY2FsL2RldiB2aXNpYmlsaXR5LiBGb3IgcHJvZHVjdGlvbiwgd2lyZSB0byBhIG1ldHJpY3MgYmFja2VuZC5cclxuICovXHJcbnR5cGUgU2FtcGxlID0gbnVtYmVyO1xyXG50eXBlIFJvdXRlS2V5ID0gc3RyaW5nO1xyXG5cclxuY29uc3QgdGltaW5ncyA9IG5ldyBNYXA8Um91dGVLZXksIFNhbXBsZVtdPigpO1xyXG5jb25zdCBlcnJvcnMgPSBuZXcgTWFwPFJvdXRlS2V5LCBudW1iZXI+KCk7XHJcbmNvbnN0IGNvdW50ZXJzID0gbmV3IE1hcDxzdHJpbmcsIG51bWJlcj4oKTtcclxuY29uc3QgaW5GbGlnaHQgPSBuZXcgTWFwPFJvdXRlS2V5LCBudW1iZXI+KCk7XHJcblxyXG5mdW5jdGlvbiBzYW5pdGl6ZUtleShrZXk6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgdHJ5IHtcclxuICAgIC8vIEtlZXAgcGF0aCBvbmx5LCBzdHJpcCBxdWVyeSBhbmQgY29sbGFwc2UgVVVJRHMgdG8gOmlkIHRvIGNvbnRyb2wgY2FyZGluYWxpdHlcclxuICAgIGNvbnN0IHVybCA9IG5ldyBVUkwoa2V5LCAnaHR0cDovL2xvY2FsJyk7XHJcbiAgICBjb25zdCBwYXRoID0gdXJsLnBhdGhuYW1lIHx8IGtleTtcclxuICAgIHJldHVybiBwYXRoLnJlcGxhY2UoL1swLTlhLWZdezh9LVswLTlhLWZdezR9LVswLTlhLWZdezR9LVswLTlhLWZdezR9LVswLTlhLWZdezEyfS9pZywgJzppZCcpO1xyXG4gIH0gY2F0Y2gge1xyXG4gICAgcmV0dXJuIChrZXkgfHwgJycpLnNwbGl0KCc/JylbMF0ucmVwbGFjZSgvWzAtOWEtZl17OH0tWzAtOWEtZl17NH0tWzAtOWEtZl17NH0tWzAtOWEtZl17NH0tWzAtOWEtZl17MTJ9L2lnLCAnOmlkJyk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmVjb3JkVGltaW5nKHJvdXRlS2V5OiBSb3V0ZUtleSwgbXM6IG51bWJlcikge1xyXG4gIGNvbnN0IHNhZmVLZXkgPSBzYW5pdGl6ZUtleShyb3V0ZUtleSk7XHJcbiAgY29uc3QgYXJyID0gdGltaW5ncy5nZXQoc2FmZUtleSkgPz8gW107XHJcbiAgYXJyLnB1c2gobXMpO1xyXG4gIGlmIChhcnIubGVuZ3RoID4gMTAwMCkgYXJyLnNoaWZ0KCk7XHJcbiAgdGltaW5ncy5zZXQoc2FmZUtleSwgYXJyKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJlY29yZEVycm9yKHJvdXRlS2V5OiBSb3V0ZUtleSkge1xyXG4gIGNvbnN0IHNhZmVLZXkgPSBzYW5pdGl6ZUtleShyb3V0ZUtleSk7XHJcbiAgZXJyb3JzLnNldChzYWZlS2V5LCAoZXJyb3JzLmdldChzYWZlS2V5KSA/PyAwKSArIDEpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaW5jckluRmxpZ2h0KHJvdXRlS2V5OiBSb3V0ZUtleSkge1xyXG4gIGNvbnN0IHNhZmVLZXkgPSBzYW5pdGl6ZUtleShyb3V0ZUtleSk7XHJcbiAgaW5GbGlnaHQuc2V0KHNhZmVLZXksIChpbkZsaWdodC5nZXQoc2FmZUtleSkgPz8gMCkgKyAxKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRlY3JJbkZsaWdodChyb3V0ZUtleTogUm91dGVLZXkpIHtcclxuICBjb25zdCBzYWZlS2V5ID0gc2FuaXRpemVLZXkocm91dGVLZXkpO1xyXG4gIGNvbnN0IGN1ciA9IChpbkZsaWdodC5nZXQoc2FmZUtleSkgPz8gMCkgLSAxO1xyXG4gIGluRmxpZ2h0LnNldChzYWZlS2V5LCBNYXRoLm1heCgwLCBjdXIpKTtcclxufVxyXG5cclxuZnVuY3Rpb24gcGVyY2VudGlsZShhcnI6IG51bWJlcltdLCBwOiBudW1iZXIpOiBudW1iZXIge1xyXG4gIGlmIChhcnIubGVuZ3RoID09PSAwKSByZXR1cm4gMDtcclxuICBjb25zdCBzb3J0ZWQgPSBbLi4uYXJyXS5zb3J0KChhLCBiKSA9PiBhIC0gYik7XHJcbiAgY29uc3QgaWR4ID0gTWF0aC5mbG9vcigocCAvIDEwMCkgKiAoc29ydGVkLmxlbmd0aCAtIDEpKTtcclxuICByZXR1cm4gc29ydGVkW2lkeF0gPz8gc29ydGVkW3NvcnRlZC5sZW5ndGggLSAxXSA/PyAwO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc25hcHNob3QoKSB7XHJcbiAgY29uc3Qgb3V0OiBSZWNvcmQ8c3RyaW5nLCBhbnk+ID0ge307XHJcbiAgY29uc3Qga2V5cyA9IG5ldyBTZXQ8c3RyaW5nPihbLi4udGltaW5ncy5rZXlzKCksIC4uLmVycm9ycy5rZXlzKCksIC4uLmluRmxpZ2h0LmtleXMoKV0pO1xyXG4gIGZvciAoY29uc3QgayBvZiBrZXlzKSB7XHJcbiAgICBjb25zdCBhcnIgPSB0aW1pbmdzLmdldChrKSA/PyBbXTtcclxuICAgIG91dFtrXSA9IHtcclxuICAgICAgY291bnQ6IGFyci5sZW5ndGgsXHJcbiAgICAgIHA1MDogcGVyY2VudGlsZShhcnIsIDUwKSxcclxuICAgICAgcDk1OiBwZXJjZW50aWxlKGFyciwgOTUpLFxyXG4gICAgICBwOTk6IHBlcmNlbnRpbGUoYXJyLCA5OSksXHJcbiAgICAgIGVycm9yczogZXJyb3JzLmdldChrKSA/PyAwLFxyXG4gICAgICBpbl9mbGlnaHQ6IGluRmxpZ2h0LmdldChrKSA/PyAwXHJcbiAgICB9O1xyXG4gIH1cclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaW5jckNvdW50ZXIobmFtZTogc3RyaW5nLCBieTogbnVtYmVyID0gMSkge1xyXG4gIGNvdW50ZXJzLnNldChuYW1lLCAoY291bnRlcnMuZ2V0KG5hbWUpID8/IDApICsgYnkpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q291bnRlcnMoKSB7XHJcbiAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhjb3VudGVycy5lbnRyaWVzKCkpO1xyXG59XHJcblxyXG5cclxuIl0sIm5hbWVzIjpbInRpbWluZ3MiLCJNYXAiLCJlcnJvcnMiLCJjb3VudGVycyIsImluRmxpZ2h0Iiwic2FuaXRpemVLZXkiLCJrZXkiLCJ1cmwiLCJVUkwiLCJwYXRoIiwicGF0aG5hbWUiLCJyZXBsYWNlIiwic3BsaXQiLCJyZWNvcmRUaW1pbmciLCJyb3V0ZUtleSIsIm1zIiwic2FmZUtleSIsImFyciIsImdldCIsInB1c2giLCJsZW5ndGgiLCJzaGlmdCIsInNldCIsInJlY29yZEVycm9yIiwiaW5jckluRmxpZ2h0IiwiZGVjckluRmxpZ2h0IiwiY3VyIiwiTWF0aCIsIm1heCIsInBlcmNlbnRpbGUiLCJwIiwic29ydGVkIiwic29ydCIsImEiLCJiIiwiaWR4IiwiZmxvb3IiLCJzbmFwc2hvdCIsIm91dCIsImtleXMiLCJTZXQiLCJrIiwiY291bnQiLCJwNTAiLCJwOTUiLCJwOTkiLCJpbl9mbGlnaHQiLCJpbmNyQ291bnRlciIsIm5hbWUiLCJieSIsImdldENvdW50ZXJzIiwiT2JqZWN0IiwiZnJvbUVudHJpZXMiLCJlbnRyaWVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/metrics.ts\n");

/***/ })

};
;