"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_rsc_src_lib_testStore_ts";
exports.ids = ["_rsc_src_lib_testStore_ts"];
exports.modules = {

/***/ "(rsc)/./src/lib/testStore.ts":
/*!******************************!*\
  !*** ./src/lib/testStore.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addChoice: () => (/* binding */ addChoice),\n/* harmony export */   addQuestion: () => (/* binding */ addQuestion),\n/* harmony export */   addQuiz: () => (/* binding */ addQuiz),\n/* harmony export */   addTestAnnouncement: () => (/* binding */ addTestAnnouncement),\n/* harmony export */   addTestAssignment: () => (/* binding */ addTestAssignment),\n/* harmony export */   addTestCourse: () => (/* binding */ addTestCourse),\n/* harmony export */   addTestEnrollment: () => (/* binding */ addTestEnrollment),\n/* harmony export */   addTestFile: () => (/* binding */ addTestFile),\n/* harmony export */   addTestLesson: () => (/* binding */ addTestLesson),\n/* harmony export */   addTestMessage: () => (/* binding */ addTestMessage),\n/* harmony export */   addTestModule: () => (/* binding */ addTestModule),\n/* harmony export */   addTestNotification: () => (/* binding */ addTestNotification),\n/* harmony export */   addTestParentLink: () => (/* binding */ addTestParentLink),\n/* harmony export */   addTestSubmission: () => (/* binding */ addTestSubmission),\n/* harmony export */   countUnreadForThread: () => (/* binding */ countUnreadForThread),\n/* harmony export */   createTestThread: () => (/* binding */ createTestThread),\n/* harmony export */   deleteQuiz: () => (/* binding */ deleteQuiz),\n/* harmony export */   deleteTestAnnouncement: () => (/* binding */ deleteTestAnnouncement),\n/* harmony export */   deleteTestAssignment: () => (/* binding */ deleteTestAssignment),\n/* harmony export */   deleteTestCourse: () => (/* binding */ deleteTestCourse),\n/* harmony export */   deleteTestModule: () => (/* binding */ deleteTestModule),\n/* harmony export */   getAttemptForStudent: () => (/* binding */ getAttemptForStudent),\n/* harmony export */   getTestCourse: () => (/* binding */ getTestCourse),\n/* harmony export */   getTestFile: () => (/* binding */ getTestFile),\n/* harmony export */   getTestNotificationPreferences: () => (/* binding */ getTestNotificationPreferences),\n/* harmony export */   getTestProfile: () => (/* binding */ getTestProfile),\n/* harmony export */   gradeTestSubmission: () => (/* binding */ gradeTestSubmission),\n/* harmony export */   listAttemptsForQuiz: () => (/* binding */ listAttemptsForQuiz),\n/* harmony export */   listChoicesByQuestion: () => (/* binding */ listChoicesByQuestion),\n/* harmony export */   listQuestionsByQuiz: () => (/* binding */ listQuestionsByQuiz),\n/* harmony export */   listQuizzesByCourse: () => (/* binding */ listQuizzesByCourse),\n/* harmony export */   listTestAnnouncementsByCourse: () => (/* binding */ listTestAnnouncementsByCourse),\n/* harmony export */   listTestAssignmentsByCourse: () => (/* binding */ listTestAssignmentsByCourse),\n/* harmony export */   listTestCoursesByTeacher: () => (/* binding */ listTestCoursesByTeacher),\n/* harmony export */   listTestEnrollmentsByCourse: () => (/* binding */ listTestEnrollmentsByCourse),\n/* harmony export */   listTestEnrollmentsByStudent: () => (/* binding */ listTestEnrollmentsByStudent),\n/* harmony export */   listTestFeatureFlags: () => (/* binding */ listTestFeatureFlags),\n/* harmony export */   listTestLessonsByCourse: () => (/* binding */ listTestLessonsByCourse),\n/* harmony export */   listTestMessagesByThread: () => (/* binding */ listTestMessagesByThread),\n/* harmony export */   listTestModulesByCourse: () => (/* binding */ listTestModulesByCourse),\n/* harmony export */   listTestNotificationsByUser: () => (/* binding */ listTestNotificationsByUser),\n/* harmony export */   listTestParentChildren: () => (/* binding */ listTestParentChildren),\n/* harmony export */   listTestParentsForStudent: () => (/* binding */ listTestParentsForStudent),\n/* harmony export */   listTestParticipantsByThread: () => (/* binding */ listTestParticipantsByThread),\n/* harmony export */   listTestSubmissionsByAssignment: () => (/* binding */ listTestSubmissionsByAssignment),\n/* harmony export */   listTestThreadsByUser: () => (/* binding */ listTestThreadsByUser),\n/* harmony export */   markAllTestNotificationsRead: () => (/* binding */ markAllTestNotificationsRead),\n/* harmony export */   markAllThreadMessagesReadForUser: () => (/* binding */ markAllThreadMessagesReadForUser),\n/* harmony export */   markTestMessageReadForUser: () => (/* binding */ markTestMessageReadForUser),\n/* harmony export */   markTestNotificationRead: () => (/* binding */ markTestNotificationRead),\n/* harmony export */   removeTestParentLink: () => (/* binding */ removeTestParentLink),\n/* harmony export */   reorderTestLessons: () => (/* binding */ reorderTestLessons),\n/* harmony export */   resetTestStore: () => (/* binding */ resetTestStore),\n/* harmony export */   setTestFeatureFlag: () => (/* binding */ setTestFeatureFlag),\n/* harmony export */   setTestNotificationPreferences: () => (/* binding */ setTestNotificationPreferences),\n/* harmony export */   shouldDeliverTestNotification: () => (/* binding */ shouldDeliverTestNotification),\n/* harmony export */   startAttempt: () => (/* binding */ startAttempt),\n/* harmony export */   submitAttempt: () => (/* binding */ submitAttempt),\n/* harmony export */   updateQuiz: () => (/* binding */ updateQuiz),\n/* harmony export */   updateTestAssignment: () => (/* binding */ updateTestAssignment),\n/* harmony export */   updateTestModule: () => (/* binding */ updateTestModule),\n/* harmony export */   upsertAnswer: () => (/* binding */ upsertAnswer),\n/* harmony export */   upsertTestProfile: () => (/* binding */ upsertTestProfile)\n/* harmony export */ });\n/**\r\n * In-memory test store (dev/test only)\r\n *\r\n * Provides a lightweight, process-local data store used when `TEST_MODE`\r\n * is enabled. It simulates database behavior for e2e and unit tests, and\r\n * persists across Next.js HMR by attaching to `globalThis`.\r\n */ // Persist state across Next.js dev HMR by attaching to globalThis\nconst globalStore = globalThis;\nconst state = globalStore.__TEST_STORE__ || (globalStore.__TEST_STORE__ = {\n    courses: new Map(),\n    lessonsByCourse: new Map(),\n    modulesByCourse: new Map(),\n    enrollmentsByStudent: new Map(),\n    enrollmentsByCourse: new Map(),\n    profilesById: new Map(),\n    parentLinksByParent: new Map()\n});\n// Backfill maps if this module loaded after an older store shape was created (HMR during dev)\nconst anyState = state;\nif (!anyState.profilesById) anyState.profilesById = new Map();\nif (!anyState.parentLinksByParent) anyState.parentLinksByParent = new Map();\nif (!anyState.modulesByCourse) anyState.modulesByCourse = new Map();\nif (!anyState.assignmentsByCourse) anyState.assignmentsByCourse = new Map();\nif (!anyState.submissionsByAssignment) anyState.submissionsByAssignment = new Map();\n// Quizzes store maps (backfill if missing for HMR)\nif (!anyState.quizzesByCourse) anyState.quizzesByCourse = new Map();\nif (!anyState.questionsByQuiz) anyState.questionsByQuiz = new Map();\nif (!anyState.choicesByQuestion) anyState.choicesByQuestion = new Map();\nif (!anyState.attemptsByQuiz) anyState.attemptsByQuiz = new Map();\nif (!anyState.answersByAttempt) anyState.answersByAttempt = new Map();\nif (!anyState.announcementsByCourse) anyState.announcementsByCourse = new Map();\nif (!anyState.filesById) anyState.filesById = new Map();\n// Messaging maps\nif (!anyState.messageThreads) anyState.messageThreads = [];\nif (!anyState.participantsByThread) anyState.participantsByThread = new Map();\nif (!anyState.messagesByThread) anyState.messagesByThread = new Map();\nif (!anyState.readByMessage) anyState.readByMessage = new Map();\nif (!anyState.featureFlags) anyState.featureFlags = new Map();\nfunction addTestCourse(course) {\n    state.courses.set(course.id, course);\n}\nfunction getTestCourse(courseId) {\n    return state.courses.get(courseId);\n}\nfunction listTestCoursesByTeacher(teacherId) {\n    return Array.from(state.courses.values()).filter((c)=>c.teacher_id === teacherId);\n}\nfunction addTestLesson(lesson) {\n    const arr = state.lessonsByCourse.get(lesson.course_id) ?? [];\n    arr.push(lesson);\n    arr.sort((a, b)=>a.order_index - b.order_index);\n    state.lessonsByCourse.set(lesson.course_id, arr);\n}\nfunction listTestLessonsByCourse(courseId) {\n    return state.lessonsByCourse.get(courseId) ?? [];\n}\nfunction resetTestStore() {\n    state.courses.clear();\n    state.lessonsByCourse.clear();\n    state.modulesByCourse.clear();\n    state.enrollmentsByStudent.clear();\n    state.enrollmentsByCourse.clear();\n    state.parentLinksByParent.clear();\n    state.assignmentsByCourse?.clear?.();\n    state.submissionsByAssignment?.clear?.();\n    // Quizzes\n    state.quizzesByCourse?.clear?.();\n    state.questionsByQuiz?.clear?.();\n    state.choicesByQuestion?.clear?.();\n    state.attemptsByQuiz?.clear?.();\n    state.answersByAttempt?.clear?.();\n    state.announcementsByCourse?.clear?.();\n    state.messageThreads = [];\n    state.participantsByThread?.clear?.();\n    state.messagesByThread?.clear?.();\n    state.filesById?.clear?.();\n}\nfunction deleteTestCourse(courseId) {\n    state.courses.delete(courseId);\n    state.lessonsByCourse.delete(courseId);\n// Note: we intentionally do not clear enrollments to keep history unless needed\n}\nfunction reorderTestLessons(courseId, updates) {\n    const arr = state.lessonsByCourse.get(courseId) ?? [];\n    const byId = new Map(arr.map((l)=>[\n            l.id,\n            l\n        ]));\n    for (const u of updates){\n        const row = byId.get(u.id);\n        if (row) row.order_index = u.order_index;\n    }\n    arr.sort((a, b)=>a.order_index - b.order_index);\n    state.lessonsByCourse.set(courseId, arr);\n}\nfunction addTestModule(row) {\n    const arr = state.modulesByCourse.get(row.course_id) ?? [];\n    arr.push(row);\n    arr.sort((a, b)=>a.order_index - b.order_index);\n    state.modulesByCourse.set(row.course_id, arr);\n}\nfunction listTestModulesByCourse(courseId) {\n    return state.modulesByCourse.get(courseId) ?? [];\n}\nfunction updateTestModule(id, data) {\n    for (const [courseId, arr] of state.modulesByCourse.entries()){\n        const idx = arr.findIndex((m)=>m.id === id);\n        if (idx >= 0) {\n            const updated = {\n                ...arr[idx],\n                ...data\n            };\n            arr[idx] = updated;\n            arr.sort((a, b)=>a.order_index - b.order_index);\n            state.modulesByCourse.set(courseId, arr);\n            return updated;\n        }\n    }\n    return undefined;\n}\nfunction deleteTestModule(id) {\n    for (const [courseId, arr] of state.modulesByCourse.entries()){\n        const filtered = arr.filter((m)=>m.id !== id);\n        if (filtered.length !== arr.length) {\n            state.modulesByCourse.set(courseId, filtered);\n            break;\n        }\n    }\n}\nfunction addTestEnrollment(row) {\n    const a = state.enrollmentsByStudent.get(row.student_id) ?? [];\n    a.push(row);\n    state.enrollmentsByStudent.set(row.student_id, a);\n    const b = state.enrollmentsByCourse.get(row.course_id) ?? [];\n    b.push(row);\n    state.enrollmentsByCourse.set(row.course_id, b);\n}\nfunction listTestEnrollmentsByStudent(studentId) {\n    return state.enrollmentsByStudent.get(studentId) ?? [];\n}\nfunction listTestEnrollmentsByCourse(courseId) {\n    return state.enrollmentsByCourse.get(courseId) ?? [];\n}\nfunction upsertTestProfile(profile) {\n    state.profilesById.set(profile.id, profile);\n}\nfunction getTestProfile(id) {\n    return state.profilesById.get(id);\n}\nfunction addTestParentLink(row) {\n    const a = state.parentLinksByParent.get(row.parent_id) ?? [];\n    a.push(row);\n    state.parentLinksByParent.set(row.parent_id, a);\n}\nfunction listTestParentChildren(parentId) {\n    return state.parentLinksByParent.get(parentId) ?? [];\n}\nfunction removeTestParentLink(parentId, studentId) {\n    const a = state.parentLinksByParent.get(parentId) ?? [];\n    const b = a.filter((x)=>x.student_id !== studentId);\n    state.parentLinksByParent.set(parentId, b);\n}\nfunction listTestParentsForStudent(studentId) {\n    const res = [];\n    for (const [pid, arr] of state.parentLinksByParent.entries()){\n        if ((arr ?? []).some((pl)=>pl.student_id === studentId)) res.push(pid);\n    }\n    return res;\n}\n// Announcements helpers (test-mode)\nfunction addTestAnnouncement(row) {\n    const s = state;\n    const arr = s.announcementsByCourse.get(row.course_id) ?? [];\n    arr.unshift(row);\n    s.announcementsByCourse.set(row.course_id, arr);\n}\nfunction listTestAnnouncementsByCourse(courseId) {\n    const s = state;\n    return (s.announcementsByCourse.get(courseId) ?? []).slice();\n}\nfunction deleteTestAnnouncement(id) {\n    const s = state;\n    for (const [cid, arr] of s.announcementsByCourse.entries()){\n        const next = arr.filter((x)=>x.id !== id);\n        if (next.length !== arr.length) {\n            s.announcementsByCourse.set(cid, next);\n            return {\n                ok: true\n            };\n        }\n    }\n    return {\n        ok: false\n    };\n}\n// ===== Messaging helpers (test-mode) =====\nfunction createTestThread(participantIds, roles) {\n    const id = makeId(\"th\");\n    const created_at = new Date().toISOString();\n    const s = state;\n    s.messageThreads.push({\n        id,\n        created_at\n    });\n    const parts = participantIds.map((uid)=>({\n            thread_id: id,\n            user_id: uid,\n            role: roles?.[uid] ?? \"user\",\n            added_at: created_at\n        }));\n    s.participantsByThread.set(id, parts);\n    return {\n        id,\n        created_at\n    };\n}\nfunction listTestThreadsByUser(userId) {\n    const s = state;\n    const res = [];\n    for (const t of s.messageThreads){\n        const parts = s.participantsByThread.get(t.id) ?? [];\n        if (parts.some((p)=>p.user_id === userId)) res.push(t);\n    }\n    // newest first\n    res.sort((a, b)=>b.created_at.localeCompare(a.created_at));\n    return res;\n}\nfunction addTestMessage(row) {\n    const id = makeId(\"ms\");\n    const created_at = new Date().toISOString();\n    const msg = {\n        id,\n        thread_id: row.thread_id,\n        sender_id: row.sender_id,\n        body: row.body,\n        created_at,\n        read_at: null\n    };\n    const s = state;\n    const arr = s.messagesByThread.get(row.thread_id) ?? [];\n    arr.push(msg);\n    arr.sort((a, b)=>a.created_at.localeCompare(b.created_at));\n    s.messagesByThread.set(row.thread_id, arr);\n    // Initialize read receipts map\n    if (!s.readByMessage) s.readByMessage = new Map();\n    s.readByMessage.set(id, new Set());\n    return msg;\n}\nfunction listTestMessagesByThread(threadId) {\n    const s = state;\n    return (s.messagesByThread.get(threadId) ?? []).slice();\n}\nfunction markTestMessageReadForUser(messageId, userId) {\n    const s = state;\n    if (!s.readByMessage) s.readByMessage = new Map();\n    const set = s.readByMessage.get(messageId) ?? new Set();\n    set.add(userId);\n    s.readByMessage.set(messageId, set);\n    // Keep legacy read_at for basic UIs\n    for (const [tid, arr] of s.messagesByThread.entries()){\n        const idx = arr.findIndex((m)=>m.id === messageId);\n        if (idx >= 0) {\n            if (!arr[idx].read_at) arr[idx] = {\n                ...arr[idx],\n                read_at: new Date().toISOString()\n            };\n            s.messagesByThread.set(tid, arr);\n            return arr[idx];\n        }\n    }\n    return null;\n}\nfunction countUnreadForThread(threadId, userId) {\n    const s = state;\n    if (!s.readByMessage) s.readByMessage = new Map();\n    const msgs = s.messagesByThread.get(threadId) ?? [];\n    let count = 0;\n    for (const m of msgs){\n        if (m.sender_id === userId) continue;\n        const readSet = s.readByMessage.get(m.id);\n        if (!readSet || !readSet.has(userId)) count++;\n    }\n    return count;\n}\nfunction markAllThreadMessagesReadForUser(threadId, userId) {\n    const s = state;\n    if (!s.readByMessage) s.readByMessage = new Map();\n    const msgs = s.messagesByThread.get(threadId) ?? [];\n    for (const m of msgs){\n        if (m.sender_id === userId) continue;\n        const set = s.readByMessage.get(m.id) ?? new Set();\n        set.add(userId);\n        s.readByMessage.set(m.id, set);\n    }\n    return {\n        ok: true\n    };\n}\n// ===== Feature Flags (test-mode) =====\nfunction listTestFeatureFlags() {\n    const s = state;\n    if (!s.featureFlags) s.featureFlags = new Map();\n    const obj = {};\n    for (const [k, v] of s.featureFlags.entries())obj[k] = !!v;\n    return obj;\n}\nfunction setTestFeatureFlag(key, value) {\n    const s = state;\n    if (!s.featureFlags) s.featureFlags = new Map();\n    s.featureFlags.set(key, !!value);\n    return {\n        key,\n        value: !!value\n    };\n}\nfunction listTestParticipantsByThread(threadId) {\n    const s = state;\n    return (s.participantsByThread.get(threadId) ?? []).slice();\n}\n// ===== Notifications helpers (test-mode) =====\nfunction addTestNotification(row) {\n    const s = state;\n    if (!s.notificationsByUser) s.notificationsByUser = new Map();\n    const id = row.id ?? makeId(\"no\");\n    const created_at = new Date().toISOString();\n    const obj = {\n        id,\n        user_id: row.user_id,\n        type: row.type,\n        payload: row.payload ?? {},\n        created_at,\n        read_at: null\n    };\n    const arr = s.notificationsByUser.get(row.user_id) ?? [];\n    arr.unshift(obj);\n    s.notificationsByUser.set(row.user_id, arr);\n    return obj;\n}\nfunction listTestNotificationsByUser(userId) {\n    const s = state;\n    if (!s.notificationsByUser) s.notificationsByUser = new Map();\n    return (s.notificationsByUser.get(userId) ?? []).slice();\n}\nfunction markTestNotificationRead(id) {\n    const s = state;\n    if (!s.notificationsByUser) s.notificationsByUser = new Map();\n    for (const [uid, arr] of s.notificationsByUser.entries()){\n        const idx = arr.findIndex((n)=>n.id === id);\n        if (idx >= 0) {\n            arr[idx] = {\n                ...arr[idx],\n                read_at: new Date().toISOString()\n            };\n            s.notificationsByUser.set(uid, arr);\n            return arr[idx];\n        }\n    }\n    return null;\n}\nfunction markAllTestNotificationsRead(userId) {\n    const s = state;\n    if (!s.notificationsByUser) s.notificationsByUser = new Map();\n    const arr = (s.notificationsByUser.get(userId) ?? []).map((n)=>({\n            ...n,\n            read_at: n.read_at ?? new Date().toISOString()\n        }));\n    s.notificationsByUser.set(userId, arr);\n    return {\n        ok: true\n    };\n}\nconst DEFAULT_PREFS = {\n    \"assignment:new\": true,\n    \"submission:graded\": true,\n    \"message:new\": true,\n    \"announcement:published\": true,\n    \"quiz:due-soon\": true\n};\nfunction getTestNotificationPreferences(userId) {\n    const s = state;\n    if (!s.notificationPrefsByUser) s.notificationPrefsByUser = new Map();\n    const current = s.notificationPrefsByUser.get(userId);\n    if (current) return {\n        ...DEFAULT_PREFS,\n        ...current\n    };\n    return {\n        ...DEFAULT_PREFS\n    };\n}\nfunction setTestNotificationPreferences(userId, partial) {\n    const s = state;\n    if (!s.notificationPrefsByUser) s.notificationPrefsByUser = new Map();\n    const merged = {\n        ...getTestNotificationPreferences(userId),\n        ...partial\n    };\n    s.notificationPrefsByUser.set(userId, merged);\n    return merged;\n}\nfunction shouldDeliverTestNotification(userId, type) {\n    const prefs = getTestNotificationPreferences(userId);\n    const val = prefs[type];\n    return val === undefined ? true : !!val;\n}\n// Assignments helpers\nfunction addTestAssignment(row) {\n    const s = state;\n    const arr = s.assignmentsByCourse.get(row.course_id) ?? [];\n    arr.push(row);\n    arr.sort((a, b)=>new Date(b.created_at).getTime() - new Date(a.created_at).getTime());\n    s.assignmentsByCourse.set(row.course_id, arr);\n}\nfunction listTestAssignmentsByCourse(courseId) {\n    const s = state;\n    return s.assignmentsByCourse.get(courseId) ?? [];\n}\nfunction updateTestAssignment(id, data) {\n    const s = state;\n    for (const [courseId, arr] of s.assignmentsByCourse.entries()){\n        const idx = arr.findIndex((x)=>x.id === id);\n        if (idx >= 0) {\n            const next = {\n                ...arr[idx],\n                ...data\n            };\n            arr[idx] = next;\n            s.assignmentsByCourse.set(courseId, arr);\n            return next;\n        }\n    }\n    return null;\n}\nfunction deleteTestAssignment(id) {\n    const s = state;\n    for (const [courseId, arr] of s.assignmentsByCourse.entries()){\n        const next = arr.filter((x)=>x.id !== id);\n        s.assignmentsByCourse.set(courseId, next);\n    }\n    return {\n        ok: true\n    };\n}\n// ===== Files (test-mode) =====\nfunction addTestFile(input) {\n    const id = makeId(\"f\");\n    const row = {\n        id,\n        owner_type: input.owner_type,\n        owner_id: input.owner_id,\n        content_type: input.content_type,\n        data_base64: input.data_base64,\n        created_at: new Date().toISOString()\n    };\n    const s = state;\n    s.filesById.set(id, row);\n    return row;\n}\nfunction getTestFile(id) {\n    const s = state;\n    return s.filesById.get(id) ?? null;\n}\n// Submissions helpers\nfunction addTestSubmission(row) {\n    const s = state;\n    const arr = s.submissionsByAssignment.get(row.assignment_id) ?? [];\n    arr.unshift(row);\n    s.submissionsByAssignment.set(row.assignment_id, arr);\n}\nfunction listTestSubmissionsByAssignment(assignmentId) {\n    const s = state;\n    return s.submissionsByAssignment.get(assignmentId) ?? [];\n}\nfunction gradeTestSubmission(id, data) {\n    const s = state;\n    for (const [aid, arr] of s.submissionsByAssignment.entries()){\n        const idx = arr.findIndex((x)=>x.id === id);\n        if (idx >= 0) {\n            const next = {\n                ...arr[idx],\n                score: data.score,\n                feedback: data.feedback ?? null\n            };\n            arr[idx] = next;\n            s.submissionsByAssignment.set(aid, arr);\n            return next;\n        }\n    }\n    return null;\n}\nfunction makeId(_prefix) {\n    const hex = \"0123456789abcdef\";\n    const rand = (n)=>Array.from({\n            length: n\n        }, ()=>hex[Math.floor(Math.random() * hex.length)]).join(\"\");\n    const s1 = rand(8);\n    const s2 = rand(4);\n    const s3 = rand(4);\n    const s4 = rand(4);\n    const s5 = rand(12);\n    return `${s1}-${s2}-${s3}-${s4}-${s5}`;\n}\nfunction addQuiz(input) {\n    const row = {\n        id: makeId(\"q\"),\n        course_id: input.course_id,\n        title: input.title,\n        time_limit_sec: input.time_limit_sec ?? null,\n        points: input.points ?? 100,\n        created_at: new Date().toISOString()\n    };\n    const s = state;\n    const arr = s.quizzesByCourse.get(row.course_id) ?? [];\n    arr.unshift(row);\n    s.quizzesByCourse.set(row.course_id, arr);\n    return row;\n}\nfunction listQuizzesByCourse(courseId) {\n    const s = state;\n    return (s.quizzesByCourse.get(courseId) ?? []).slice();\n}\nfunction updateQuiz(id, data) {\n    const s = state;\n    for (const [courseId, arr] of s.quizzesByCourse.entries()){\n        const idx = arr.findIndex((q)=>q.id === id);\n        if (idx >= 0) {\n            const q = arr[idx];\n            const updated = {\n                ...q,\n                ...data\n            };\n            arr[idx] = updated;\n            s.quizzesByCourse.set(courseId, arr);\n            return updated;\n        }\n    }\n    return null;\n}\nfunction deleteQuiz(id) {\n    const s = state;\n    for (const [courseId, arr] of s.quizzesByCourse.entries()){\n        const next = arr.filter((q)=>q.id !== id);\n        if (next.length !== arr.length) {\n            s.quizzesByCourse.set(courseId, next);\n            // Cascade: remove questions for this quiz\n            s.questionsByQuiz.delete(id);\n            return {\n                ok: true\n            };\n        }\n    }\n    return {\n        ok: false\n    };\n}\nfunction addQuestion(input) {\n    const row = {\n        id: makeId(\"r\"),\n        quiz_id: input.quiz_id,\n        text: input.text,\n        order_index: input.order_index ?? 1\n    };\n    const s = state;\n    const arr = s.questionsByQuiz.get(row.quiz_id) ?? [];\n    arr.push(row);\n    arr.sort((a, b)=>a.order_index - b.order_index);\n    s.questionsByQuiz.set(row.quiz_id, arr);\n    return row;\n}\nfunction listQuestionsByQuiz(quizId) {\n    const s = state;\n    return (s.questionsByQuiz.get(quizId) ?? []).slice();\n}\nfunction addChoice(input) {\n    const row = {\n        id: makeId(\"s\"),\n        question_id: input.question_id,\n        text: input.text,\n        correct: input.correct,\n        order_index: input.order_index ?? 1\n    };\n    const s = state;\n    const arr = s.choicesByQuestion.get(row.question_id) ?? [];\n    arr.push(row);\n    arr.sort((a, b)=>a.order_index - b.order_index);\n    s.choicesByQuestion.set(row.question_id, arr);\n    return row;\n}\nfunction listChoicesByQuestion(questionId) {\n    const s = state;\n    return (s.choicesByQuestion.get(questionId) ?? []).slice();\n}\nfunction startAttempt(input) {\n    const row = {\n        id: makeId(\"t\"),\n        quiz_id: input.quiz_id,\n        student_id: input.student_id,\n        started_at: new Date().toISOString(),\n        submitted_at: null,\n        score: 0\n    };\n    const s = state;\n    const arr = s.attemptsByQuiz.get(row.quiz_id) ?? [];\n    arr.push(row);\n    s.attemptsByQuiz.set(row.quiz_id, arr);\n    return row;\n}\nfunction upsertAnswer(input) {\n    const s = state;\n    const ansArr = s.answersByAttempt.get(input.attempt_id) ?? [];\n    const idx = ansArr.findIndex((a)=>a.question_id === input.question_id);\n    const row = idx >= 0 ? {\n        ...ansArr[idx],\n        choice_id: input.choice_id,\n        created_at: new Date().toISOString()\n    } : {\n        id: makeId(\"u\"),\n        attempt_id: input.attempt_id,\n        question_id: input.question_id,\n        choice_id: input.choice_id,\n        created_at: new Date().toISOString()\n    };\n    if (idx >= 0) ansArr[idx] = row;\n    else ansArr.push(row);\n    s.answersByAttempt.set(input.attempt_id, ansArr);\n    return row;\n}\nfunction submitAttempt(input) {\n    const s = state;\n    let attempt;\n    let quizId;\n    for (const [qid, arr] of s.attemptsByQuiz.entries()){\n        const found = arr.find((a)=>a.id === input.attempt_id);\n        if (found) {\n            attempt = found;\n            quizId = qid;\n            break;\n        }\n    }\n    if (!attempt || !quizId) return null;\n    const questions = s.questionsByQuiz.get(quizId) ?? [];\n    const total = questions.length;\n    const answers = s.answersByAttempt.get(attempt.id) ?? [];\n    let correct = 0;\n    for (const q of questions){\n        const a = answers.find((x)=>x.question_id === q.id);\n        if (!a) continue;\n        const choices = s.choicesByQuestion.get(q.id) ?? [];\n        const correctChoice = choices.find((c)=>c.correct);\n        if (correctChoice && a.choice_id === correctChoice.id) correct++;\n    }\n    let quizPoints = 100;\n    for (const [, quizzes] of s.quizzesByCourse.entries()){\n        const match = quizzes.find((q)=>q.id === quizId);\n        if (match) {\n            quizPoints = match.points;\n            break;\n        }\n    }\n    const score = total > 0 ? Math.round(correct / total * quizPoints) : 0;\n    attempt.submitted_at = new Date().toISOString();\n    attempt.score = score;\n    return attempt;\n}\nfunction listAttemptsForQuiz(quiz_id) {\n    const s = state;\n    return (s.attemptsByQuiz.get(quiz_id) ?? []).slice();\n}\nfunction getAttemptForStudent(quiz_id, student_id) {\n    const s = state;\n    const arr = s.attemptsByQuiz.get(quiz_id) ?? [];\n    const mine = arr.filter((a)=>a.student_id === student_id);\n    if (mine.length === 0) return null;\n    mine.sort((a, b)=>b.started_at.localeCompare(a.started_at));\n    return mine[0];\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/testStore.ts\n");

/***/ })

};
;